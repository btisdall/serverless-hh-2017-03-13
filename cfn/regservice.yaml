---
AWSTemplateFormatVersion: '2010-09-09'

Description: Enterprisey Security Appliance registration service

Resources:

  RegSrvLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Appliance registration service
      FunctionName: SecApplianceReg
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs4.3
      Timeout: 3
      Environment:
        Variables:
          TABLE_NAME: !Ref InstancesTable
          DYNAMODB_ENDPOINT:
            Fn::Join:
            - ""
            - - "https://dynamodb."
              - !Ref AWS::Region
              - ".amazonaws.com"
      Code:
        ZipFile: |
          'use strict';
          console.log('Loading function');
          const AWS = require('aws-sdk');
          const ddClient = new AWS.DynamoDB.DocumentClient({
            endpoint: process.env.DYNAMODB_ENDPOINT,
          });

          exports.handler = (event, context, callback) => {

            const done = (err, res) => callback(null, {
                statusCode: err ? '400' : '200',
                body: err ? err.message : JSON.stringify(res),
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            var params = {
              TableName: process.env.TABLE_NAME,
              Item: event.data
            };

            ddClient.put(params, done);

          };

  InstancesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: instance_id
          AttributeType: S
      KeySchema:
        -
          AttributeName: instance_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 10

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            - lambda:InvokeFunction
            Resource:
              Fn::Join:
              - ""
              - - "arn:aws:dynamodb:"
                - !Ref AWS::Region
                - ":"
                - !Ref AWS::AccountId
                - ":table/"
                - !Ref InstancesTable

  RestApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: !GetAtt RegSrvLambda.Arn

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RegSrvApi
      Body:
        swagger: "2.0"
        info:
          version: "2016-07-07T11:29:55Z"
          title: "RegSrv"
        basePath: "/prod"
        schemes:
        - https
        paths:
          "/claim":
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                "200":
                  description: 200 response
                  schema:
                    "$ref": "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                credentials: !GetAtt RestApiRole.Arn
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri:
                  Fn::Join:
                  - ""
                  - - "arn:aws:apigateway:"
                    - Ref: AWS::Region
                    - ":lambda:path/2015-03-31/functions/"
                    - !GetAtt RegSrvLambda.Arn
                    - "/invocations"
                passThroughBehavior: when_no_templates
                httpMethod: POST
                type: aws
                requestTemplates:
                  application/x-www-form-urlencoded: |-
                    {
                      "data": {
                        #foreach( $token in $input.path('$').split('&') )
                          #set( $keyVal = $token.split('=') )
                          #set( $keyValSize = $keyVal.size() )
                          #if( $keyValSize >= 1 )
                            #set( $key = $util.urlDecode($keyVal[0]) )
                            #if( $keyValSize >= 2 )
                              #set( $val = $util.urlDecode($keyVal[1]) )
                            #else
                              #set( $val = '' )
                            #end
                            "$key": "$val"#if($foreach.hasNext),#end
                          #end
                        #end
                      }
                    }

            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                "200":
                  description: 200 response
                  schema:
                    "$ref": "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
        definitions:
          Empty:
            type: object
      Description: Handles submitted contact form
      FailOnWarnings: true
  StageApi:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: DeployApi
      Description: RegSrv stage
      RestApiId:
        Ref: RestApi
      StageName: prod
  DeployApi:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: RegSrv Deployment
      RestApiId:
        Ref: RestApi
      StageName: DummyStage
